name: CI Validate and Deploy to Dev

on:
  # Trigger workflow on Pull Request to the main branch
  pull_request:
    branches:
      - main
  # Trigger workflow on push to the main branch (for automatic deployment)
  push:
    branches:
      - main

jobs:
  validate:
    name: Validate Code and Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Required to comment on PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest boto3

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform/environments/dev
        run: terraform init -backend=false # Do not initialize backend for validation

      - name: Terraform Validate
        working-directory: ./terraform/environments/dev
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform/environments/dev
        run: terraform plan -no-color
        continue-on-error: true # Allow plan to fail without failing the workflow

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const output = \#### Terraform Plan ðŸ“–\
            \\\
            
            \${{ steps.plan.outputs.stdout }}
            
            \\\
            \;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate # This job runs only if the 'validate' job succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Run only on merge to main

    permissions:
      contents: read
      id-token: write # Required for OIDC authentication to AWS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::ACCOUNT-ID:role/GitHubAction-AssumeRole-BuildingOS # TODO: Replace with your AWS IAM Role ARN
          aws-region: us-east-1 # TODO: Change to your preferred region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # NOTE: In a real project, this step would run your build_lambdas.ps1 script
      # to create the .zip files before running terraform apply.

      - name: Terraform Init
        working-directory: ./terraform/environments/dev
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform/environments/dev
        run: terraform apply -auto-approve

{"created": 1754773581.747726, "duration": 26.85578942298889, "exitcode": 1, "root": "C:\\Projects\\building-os-platform\\tests\\api", "environment": {}, "summary": {"failed": 21, "passed": 12, "total": 33, "collected": 33}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "__init__.py", "type": "Package"}]}, {"nodeid": "test_endpoints.py::TestPayloads", "outcome": "passed", "result": []}, {"nodeid": "test_endpoints.py::TestHealthEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_success", "type": "Function", "lineno": 14}, {"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_performance", "type": "Function", "lineno": 23}]}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_basic_request", "type": "Function", "lineno": 37}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_request", "type": "Function", "lineno": 46}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_id", "type": "Function", "lineno": 56}]}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_valid_message", "type": "Function", "lineno": 68}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_user_id", "type": "Function", "lineno": 81}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_message", "type": "Function", "lineno": 89}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_conversations", "type": "Function", "lineno": 97}]}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_call_basic", "type": "Function", "lineno": 109}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_missing_mission_id", "type": "Function", "lineno": 120}]}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_basic", "type": "Function", "lineno": 132}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_with_custom_query", "type": "Function", "lineno": 142}]}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_mission_status", "type": "Function", "lineno": 155}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_different_mission_id", "type": "Function", "lineno": 166}]}, {"nodeid": "test_endpoints.py::TestCORSHeaders", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/health]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/director]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/persona]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/elevator/call]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/psim/search]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/coordinator/missions/test-123]", "type": "Function", "lineno": 178}]}, {"nodeid": "test_endpoints.py::TestErrorHandling", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_endpoint", "type": "Function", "lineno": 220}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_method", "type": "Function", "lineno": 225}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_malformed_json", "type": "Function", "lineno": 235}]}, {"nodeid": "test_endpoints.py", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPayloads", "type": "Class"}, {"nodeid": "test_endpoints.py::TestHealthEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestCORSHeaders", "type": "Class"}, {"nodeid": "test_endpoints.py::TestErrorHandling", "type": "Class"}]}, {"nodeid": "test_performance.py::TestPerformance", "outcome": "passed", "result": [{"nodeid": "test_performance.py::TestPerformance::test_response_time_under_threshold", "type": "Function", "lineno": 18}, {"nodeid": "test_performance.py::TestPerformance::test_concurrent_health_checks", "type": "Function", "lineno": 45}]}, {"nodeid": "test_performance.py::TestLoadTesting", "outcome": "passed", "result": [{"nodeid": "test_performance.py::TestLoadTesting::test_sustained_load_health_endpoint", "type": "Function", "lineno": 72}]}, {"nodeid": "test_performance.py::TestStressScenarios", "outcome": "passed", "result": [{"nodeid": "test_performance.py::TestStressScenarios::test_large_payload_persona", "type": "Function", "lineno": 149}, {"nodeid": "test_performance.py::TestStressScenarios::test_rapid_successive_requests", "type": "Function", "lineno": 163}, {"nodeid": "test_performance.py::TestStressScenarios::test_special_characters_in_requests", "type": "Function", "lineno": 189}]}, {"nodeid": "test_performance.py::TestBoundaryConditions", "outcome": "passed", "result": [{"nodeid": "test_performance.py::TestBoundaryConditions::test_empty_payloads", "type": "Function", "lineno": 213}, {"nodeid": "test_performance.py::TestBoundaryConditions::test_null_values_in_payload", "type": "Function", "lineno": 224}, {"nodeid": "test_performance.py::TestBoundaryConditions::test_extremely_long_mission_id", "type": "Function", "lineno": 233}]}, {"nodeid": "test_performance.py", "outcome": "passed", "result": [{"nodeid": "test_performance.py::TestPerformance", "type": "Class"}, {"nodeid": "test_performance.py::TestLoadTesting", "type": "Class"}, {"nodeid": "test_performance.py::TestStressScenarios", "type": "Class"}, {"nodeid": "test_performance.py::TestBoundaryConditions", "type": "Class"}]}, {"nodeid": "__init__.py", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py", "type": "Module"}, {"nodeid": "test_performance.py", "type": "Module"}]}], "tests": [{"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_success", "lineno": 14, "outcome": "failed", "keywords": ["test_health_check_success", "TestHealthEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.015406599995912984, "outcome": "passed", "stdout": "\n\ud83e\uddea Starting BuildingOS API Test Suite\n\ud83c\udf10 Base URL: https://pj4vlvxrg7.execute-api.us-east-1.amazonaws.com\n\ud83c\udff7\ufe0f  Environment: dev\n"}, "call": {"duration": 1.2633447000043816, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 19, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 19, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 1259.91ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestHealthEndpoint object at 0x000001954A359F90>\n\n    def test_health_check_success(self):\n        \"\"\"Test that health endpoint returns success\"\"\"\n        response, data = client.get(\"/health\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:19: AssertionError"}, "teardown": {"duration": 0.0011099000039394014, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_performance", "lineno": 23, "outcome": "failed", "keywords": ["test_health_check_performance", "TestHealthEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005596999981207773, "outcome": "passed"}, "call": {"duration": 0.16541619999770774, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 32, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 32, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 163.06ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestHealthEndpoint object at 0x000001954A35A490>\n\n    def test_health_check_performance(self):\n        \"\"\"Test that health endpoint responds quickly\"\"\"\n        start_time = time.time()\n        response, data = client.get(\"/health\")\n        end_time = time.time()\n    \n        response_time = (end_time - start_time) * 1000\n        assert response_time < 2000  # Should respond within 2 seconds\n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:32: AssertionError"}, "teardown": {"duration": 0.0011278999954811297, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_basic_request", "lineno": 37, "outcome": "failed", "keywords": ["test_director_basic_request", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005788999987998977, "outcome": "passed"}, "call": {"duration": 0.16648719999648165, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 42, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 42, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /director\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.14ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestDirectorEndpoint object at 0x000001954A35A5D0>\n\n    def test_director_basic_request(self):\n        \"\"\"Test director without parameters\"\"\"\n        response, data = client.get(\"/director\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:42: AssertionError"}, "teardown": {"duration": 0.001258399999642279, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_request", "lineno": 46, "outcome": "failed", "keywords": ["test_director_with_user_request", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005852000031154603, "outcome": "passed"}, "call": {"duration": 0.16539170000032755, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 52, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 52, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /director?user_request=Test mission from Python API tests\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 162.65ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestDirectorEndpoint object at 0x000001954A35A350>\n\n    def test_director_with_user_request(self):\n        \"\"\"Test director with user request parameter\"\"\"\n        user_request = \"Test mission from Python API tests\"\n        response, data = client.get(f\"/director?user_request={user_request}\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:52: AssertionError"}, "teardown": {"duration": 0.000924600004509557, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_id", "lineno": 56, "outcome": "failed", "keywords": ["test_director_with_user_id", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005099999980302528, "outcome": "passed"}, "call": {"duration": 0.16653170000063255, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 62, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 62, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /director?user_id=api-test-user\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.14ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestDirectorEndpoint object at 0x000001954A32AFD0>\n\n    def test_director_with_user_id(self):\n        \"\"\"Test director with user_id parameter\"\"\"\n        user_id = config.test_user_id\n        response, data = client.get(f\"/director?user_id={user_id}\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:62: AssertionError"}, "teardown": {"duration": 0.0009232000011252239, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_valid_message", "lineno": 68, "outcome": "failed", "keywords": ["test_persona_valid_message", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005065999939688481, "outcome": "passed"}, "call": {"duration": 0.16666580000310205, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 74, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 74, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.34ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestPersonaEndpoint object at 0x000001954A35A710>\n\n    def test_persona_valid_message(self):\n        \"\"\"Test persona with valid message\"\"\"\n        payload = TestPayloads.persona_message()\n        response, data = client.post(\"/persona\", json=payload)\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:74: AssertionError"}, "teardown": {"duration": 0.000901999999769032, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_user_id", "lineno": 81, "outcome": "passed", "keywords": ["test_persona_missing_user_id", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004776999994646758, "outcome": "passed"}, "call": {"duration": 0.1674633000002359, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 165.29ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0009522000036668032, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_message", "lineno": 89, "outcome": "passed", "keywords": ["test_persona_missing_message", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.000509600002260413, "outcome": "passed"}, "call": {"duration": 0.18328489999839803, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 181.16ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0010322000016458333, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_conversations", "lineno": 97, "outcome": "passed", "keywords": ["test_persona_conversations", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0008077999955276027, "outcome": "passed"}, "call": {"duration": 0.16042039999592816, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /persona/conversations?user_id=api-test-user\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 157.95ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0007759000000078231, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_call_basic", "lineno": 109, "outcome": "failed", "keywords": ["test_elevator_call_basic", "TestElevatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005216999998083338, "outcome": "passed"}, "call": {"duration": 0.17309589999786112, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 116, "message": "assert 404 in [200, 400]\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 116, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /elevator/call\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.67ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestElevatorEndpoint object at 0x000001954A35A990>\n\n    def test_elevator_call_basic(self):\n        \"\"\"Test basic elevator call\"\"\"\n        payload = TestPayloads.elevator_call()\n        response, data = client.post(\"/elevator/call\", json=payload)\n    \n        # Elevator might return various responses depending on implementation\n>       assert response.status_code in [200, 400]  # Allow 400 for missing parameters\nE       assert 404 in [200, 400]\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:116: AssertionError"}, "teardown": {"duration": 0.0009434000021428801, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_missing_mission_id", "lineno": 120, "outcome": "passed", "keywords": ["test_elevator_missing_mission_id", "TestElevatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005985999960103072, "outcome": "passed"}, "call": {"duration": 0.16896139999880688, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /elevator/call\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 166.51ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.000909399997908622, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_basic", "lineno": 132, "outcome": "failed", "keywords": ["test_psim_search_basic", "TestPSIMEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005270000037853606, "outcome": "passed"}, "call": {"duration": 0.17188760000135517, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 138, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 138, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.51ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestPSIMEndpoint object at 0x000001954A35AC10>\n\n    def test_psim_search_basic(self):\n        \"\"\"Test basic PSIM search\"\"\"\n        payload = TestPayloads.psim_search()\n        response, data = client.post(\"/psim/search\", json=payload)\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:138: AssertionError"}, "teardown": {"duration": 0.000887399997736793, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_with_custom_query", "lineno": 142, "outcome": "failed", "keywords": ["test_psim_search_with_custom_query", "TestPSIMEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005258000019239262, "outcome": "passed"}, "call": {"duration": 0.1691805000009481, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 149, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 149, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 166.91ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestPSIMEndpoint object at 0x000001954A35AD50>\n\n    def test_psim_search_with_custom_query(self):\n        \"\"\"Test PSIM search with custom query\"\"\"\n        custom_query = \"python-test-user\"\n        payload = TestPayloads.psim_search(query=custom_query)\n        response, data = client.post(\"/psim/search\", json=payload)\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:149: AssertionError"}, "teardown": {"duration": 0.0009414999949513003, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_mission_status", "lineno": 155, "outcome": "failed", "keywords": ["test_coordinator_mission_status", "TestCoordinatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005032000044593588, "outcome": "passed"}, "call": {"duration": 0.16745950000040466, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 161, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 161, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /coordinator/missions/test-mission-123\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 165.11ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCoordinatorEndpoint object at 0x000001954A35AE90>\n\n    def test_coordinator_mission_status(self):\n        \"\"\"Test coordinator mission status\"\"\"\n        mission_id = \"test-mission-123\"\n        response, data = client.get(f\"/coordinator/missions/{mission_id}\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:161: AssertionError"}, "teardown": {"duration": 0.0009135999935097061, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_different_mission_id", "lineno": 166, "outcome": "failed", "keywords": ["test_coordinator_different_mission_id", "TestCoordinatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005447000003186986, "outcome": "passed"}, "call": {"duration": 0.16490730000077747, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 172, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 172, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /coordinator/missions/python-test-1754773559\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 162.39ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCoordinatorEndpoint object at 0x000001954A35AFD0>\n\n    def test_coordinator_different_mission_id(self):\n        \"\"\"Test coordinator with different mission ID\"\"\"\n        mission_id = f\"python-test-{int(time.time())}\"\n        response, data = client.get(f\"/coordinator/missions/{mission_id}\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:172: AssertionError"}, "teardown": {"duration": 0.0011827999987872317, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/health]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/health]", "parametrize", "pytestmark", "/health", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0006796000016038306, "outcome": "passed"}, "call": {"duration": 0.1680006999959005, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /health\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 165.22ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A35B390>, endpoint = '/health'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /health\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.000916799996048212, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/director]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/director]", "parametrize", "pytestmark", "/director", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005893999987165444, "outcome": "passed"}, "call": {"duration": 0.16424280000501312, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /director\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /director\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 161.85ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A35B4D0>, endpoint = '/director'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /director\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0009103000047616661, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/persona]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/persona]", "parametrize", "pytestmark", "/persona", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0006027000054018572, "outcome": "passed"}, "call": {"duration": 0.16220930000417866, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /persona\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 159.95ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A32B5C0>, endpoint = '/persona'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /persona\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0009748999946168624, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/elevator/call]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/elevator/call]", "parametrize", "pytestmark", "/elevator/call", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0007486999966204166, "outcome": "passed"}, "call": {"duration": 0.16614680000202497, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /elevator/call\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /elevator/call\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 163.58ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A32B6F0>, endpoint = '/elevator/call'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /elevator/call\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0008791000000201166, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/psim/search]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/psim/search]", "parametrize", "pytestmark", "/psim/search", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005079000038676895, "outcome": "passed"}, "call": {"duration": 0.1697238999986439, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /psim/search\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 167.48ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A410290>, endpoint = '/psim/search'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /psim/search\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.000971200002823025, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/coordinator/missions/test-123]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/coordinator/missions/test-123]", "parametrize", "pytestmark", "/coordinator/missions/test-123", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0006806000019423664, "outcome": "passed"}, "call": {"duration": 0.16424740000366, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /coordinator/missions/test-123\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /coordinator/missions/test-123\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 161.71ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000001954A3C4AF0>, endpoint = '/coordinator/missions/test-123'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /coordinator/missions/test-123\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0009013000017148443, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_endpoint", "lineno": 220, "outcome": "passed", "keywords": ["test_invalid_endpoint", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.00047849999828031287, "outcome": "passed"}, "call": {"duration": 0.1670698000016273, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /invalid-endpoint\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.73ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0009682000018074177, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_method", "lineno": 225, "outcome": "passed", "keywords": ["test_invalid_method", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005718000029446557, "outcome": "passed"}, "call": {"duration": 0.16347689999383874, "outcome": "passed", "stdout": "\n\ud83d\ude80 DELETE /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 160.35ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.000928000001295004, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_malformed_json", "lineno": 235, "outcome": "passed", "keywords": ["test_malformed_json", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005450999960885383, "outcome": "passed"}, "call": {"duration": 0.1696899000016856, "outcome": "passed"}, "teardown": {"duration": 0.0008807999984128401, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_performance.py::TestPerformance::test_response_time_under_threshold", "lineno": 18, "outcome": "passed", "keywords": ["test_response_time_under_threshold", "TestPerformance", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.00036729999555973336, "outcome": "passed"}, "call": {"duration": 0.8350706000055652, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.54ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /director\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 162.57ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 165.87ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 162.91ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /coordinator/missions/perf-test-123\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.16ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0005480000036186539, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestPerformance::test_concurrent_health_checks", "lineno": 45, "outcome": "failed", "keywords": ["test_concurrent_health_checks", "TestPerformance", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0004955999975209124, "outcome": "passed"}, "call": {"duration": 1.5893235999974422, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 63, "message": "assert 0 == 5"}, "traceback": [{"path": "test_performance.py", "lineno": 63, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\n\ud83d\ude80 GET /health\n\n\ud83d\ude80 GET /health\n\n\ud83d\ude80 GET /health\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 161.50ms | \ud83d\udce6 Size: 23 bytes\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 1509.67ms | \ud83d\udce6 Size: 23 bytes\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 1518.68ms | \ud83d\udce6 Size: 23 bytes\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 1571.86ms | \ud83d\udce6 Size: 23 bytes\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 1580.45ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_performance.TestPerformance object at 0x000001954AB54050>\n\n    def test_concurrent_health_checks(self):\n        \"\"\"Test multiple concurrent health check requests\"\"\"\n    \n        def make_health_request():\n            response, data = client.get(\"/health\")\n            return response.status_code == 200, response.elapsed.total_seconds() * 1000\n    \n        concurrent_requests = 5\n    \n        with ThreadPoolExecutor(max_workers=concurrent_requests) as executor:\n            futures = [\n                executor.submit(make_health_request) for _ in range(concurrent_requests)\n            ]\n            results = [future.result() for future in as_completed(futures)]\n    \n        # All requests should succeed\n        success_count = sum(1 for success, _ in results if success)\n>       assert success_count == concurrent_requests\nE       assert 0 == 5\n\ntest_performance.py:63: AssertionError"}, "teardown": {"duration": 0.0004485000026761554, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestLoadTesting::test_sustained_load_health_endpoint", "lineno": 72, "outcome": "failed", "keywords": ["test_sustained_load_health_endpoint", "slow", "pytestmark", "TestLoadTesting", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0006099000020185485, "outcome": "passed"}, "call": {"duration": 13.266475500000524, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 139, "message": "AssertionError: Success rate too low: 0.0%\nassert 0.0 >= 95"}, "traceback": [{"path": "test_performance.py", "lineno": 139, "message": "AssertionError"}], "stdout": "\n\ud83d\udd25 Running sustained load test...\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.39ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.98ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.40ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 168.62ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 175.80ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 196.69ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 164.12ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.13ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.55ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 171.69ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.65ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 165.40ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 161.39ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 478.43ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.26ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.58ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 167.73ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.09ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.04ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 160.00ms | \ud83d\udce6 Size: 23 bytes\n  Making 20 requests... 0:00:13\n\u2705 Success rate: 0.0% (0/20)\n", "longrepr": "self = <api.test_performance.TestLoadTesting object at 0x000001954AB54190>\n\n    @pytest.mark.slow\n    def test_sustained_load_health_endpoint(self):\n        \"\"\"Test sustained load on health endpoint\"\"\"\n        console.print(\"\\n\ud83d\udd25 [bold yellow]Running sustained load test...[/bold yellow]\")\n    \n        requests_per_second = 2\n        duration_seconds = 10\n        total_requests = requests_per_second * duration_seconds\n    \n        results = []\n    \n        with Progress(\n            SpinnerColumn(),\n            \"[progress.description]{task.description}\",\n            TimeElapsedColumn(),\n            console=console,\n        ) as progress:\n            task = progress.add_task(\n                f\"Making {total_requests} requests...\", total=total_requests\n            )\n    \n            for i in range(total_requests):\n                start_time = time.time()\n    \n                try:\n                    response, data = client.get(\"/health\")\n                    end_time = time.time()\n    \n                    results.append(\n                        {\n                            \"success\": response.status_code == 200,\n                            \"response_time\": (end_time - start_time) * 1000,\n                            \"request_number\": i + 1,\n                        }\n                    )\n    \n                except Exception as e:\n                    results.append(\n                        {\"success\": False, \"error\": str(e), \"request_number\": i + 1}\n                    )\n    \n                progress.update(task, advance=1)\n    \n                # Rate limiting\n                if i < total_requests - 1:\n                    time.sleep(1 / requests_per_second)\n    \n        # Analyze results\n        successful_requests = [r for r in results if r[\"success\"]]\n        success_rate = len(successful_requests) / len(results) * 100\n    \n        console.print(\n            f\"\u2705 Success rate: {success_rate:.1f}% ({len(successful_requests)}/{len(results)})\"\n        )\n    \n        if successful_requests:\n            times = [r[\"response_time\"] for r in successful_requests]\n            avg_time = sum(times) / len(times)\n            max_time = max(times)\n            min_time = min(times)\n    \n            console.print(f\"\u23f1\ufe0f  Avg response: {avg_time:.2f}ms\")\n            console.print(f\"\ud83d\udc0c Max response: {max_time:.2f}ms\")\n            console.print(f\"\u26a1 Min response: {min_time:.2f}ms\")\n    \n        # Assertions\n>       assert success_rate >= 95, f\"Success rate too low: {success_rate:.1f}%\"\nE       AssertionError: Success rate too low: 0.0%\nE       assert 0.0 >= 95\n\ntest_performance.py:139: AssertionError"}, "teardown": {"duration": 0.00046489999658660963, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestStressScenarios::test_large_payload_persona", "lineno": 149, "outcome": "failed", "keywords": ["test_large_payload_persona", "TestStressScenarios", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0003980999972554855, "outcome": "passed"}, "call": {"duration": 0.9612223000003723, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 158, "message": "assert 404 in [200, 413, 400]\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_performance.py", "lineno": 158, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 958.81ms | \ud83d\udce6 Size: 23 bytes\n", "longrepr": "self = <api.test_performance.TestStressScenarios object at 0x000001954AB542D0>\n\n    def test_large_payload_persona(self):\n        \"\"\"Test persona endpoint with large message\"\"\"\n        large_message = \"x\" * 10000  # 10KB message\n        payload = {\"user_id\": \"stress-test-user\", \"message\": large_message}\n    \n        response, data = client.post(\"/persona\", json=payload)\n    \n        # Should handle large payloads gracefully\n>       assert response.status_code in [\n            200,\n            413,\n            400,\n        ]  # Success, Payload Too Large, or Bad Request\nE       assert 404 in [200, 413, 400]\nE        +  where 404 = <Response [404]>.status_code\n\ntest_performance.py:158: AssertionError"}, "teardown": {"duration": 0.00044919999345438555, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestStressScenarios::test_rapid_successive_requests", "lineno": 163, "outcome": "failed", "keywords": ["test_rapid_successive_requests", "TestStressScenarios", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0004186000005574897, "outcome": "passed"}, "call": {"duration": 1.7332487999956356, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 188, "message": "assert 0.0 >= 80"}, "traceback": [{"path": "test_performance.py", "lineno": 188, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 176.20ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 177.65ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.48ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 166.76ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.88ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.94ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 167.14ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.75ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 171.00ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.93ms | \ud83d\udce6 Size: 23 bytes\n\ud83d\ude80 Rapid requests: 10 in 1.73s\n\u2705 Success rate: 0.0%\n", "longrepr": "self = <api.test_performance.TestStressScenarios object at 0x000001954AB54410>\n\n    def test_rapid_successive_requests(self):\n        \"\"\"Test rapid successive requests to same endpoint\"\"\"\n        rapid_requests = 10\n        results = []\n    \n        start_time = time.time()\n    \n        for i in range(rapid_requests):\n            try:\n                response, data = client.get(\"/health\")\n                results.append(response.status_code == 200)\n            except Exception:\n                results.append(False)\n    \n        end_time = time.time()\n        total_time = end_time - start_time\n    \n        success_count = sum(results)\n        success_rate = success_count / rapid_requests * 100\n    \n        console.print(f\"\ud83d\ude80 Rapid requests: {rapid_requests} in {total_time:.2f}s\")\n        console.print(f\"\u2705 Success rate: {success_rate:.1f}%\")\n    \n        # At least 80% should succeed\n>       assert success_rate >= 80\nE       assert 0.0 >= 80\n\ntest_performance.py:188: AssertionError"}, "teardown": {"duration": 0.0004332999960752204, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestStressScenarios::test_special_characters_in_requests", "lineno": 189, "outcome": "passed", "keywords": ["test_special_characters_in_requests", "TestStressScenarios", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0003739000021596439, "outcome": "passed"}, "call": {"duration": 0.5136739000008674, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 169.24ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 168.98ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 170.28ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.000454399996669963, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestBoundaryConditions::test_empty_payloads", "lineno": 213, "outcome": "passed", "keywords": ["test_empty_payloads", "TestBoundaryConditions", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.00040940000326372683, "outcome": "passed"}, "call": {"duration": 0.5230684999987716, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 166.87ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /elevator/call\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 172.98ms | \ud83d\udce6 Size: 23 bytes\n\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 178.17ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0005367999983718619, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestBoundaryConditions::test_null_values_in_payload", "lineno": 224, "outcome": "passed", "keywords": ["test_null_values_in_payload", "TestBoundaryConditions", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.00048750000132713467, "outcome": "passed"}, "call": {"duration": 0.16318930000124965, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 160.43ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0004793999978573993, "outcome": "passed"}}, {"nodeid": "test_performance.py::TestBoundaryConditions::test_extremely_long_mission_id", "lineno": 233, "outcome": "passed", "keywords": ["test_extremely_long_mission_id", "TestBoundaryConditions", "test_performance.py", "__init__.py", "api"], "setup": {"duration": 0.0004526000047917478, "outcome": "passed"}, "call": {"duration": 0.17813739999837708, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET \n/coordinator/missions/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 173.00ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.13413340000261087, "outcome": "passed", "stdout": "\n\ud83d\udcca Test Session Complete\n                              \ud83d\udd0d Request Summary                               \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Method \u2502 Endpoint                            \u2502 Status \u2502 Time (ms) \u2502 Success \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 1259.91   \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 163.06    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /director                           \u2502 404    \u2502 164.14    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /director?user_request=Test mission \u2502 404    \u2502 162.65    \u2502 \u274c      \u2502\n\u2502        \u2502 from Python API tests               \u2502        \u2502           \u2502         \u2502\n\u2502 GET    \u2502 /director?user_id=api-test-user     \u2502 404    \u2502 164.14    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 164.34    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 165.29    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 181.16    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /persona/conversations?user_id=api\u2026 \u2502 404    \u2502 157.95    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 404    \u2502 170.67    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 404    \u2502 166.51    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 404    \u2502 169.51    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 404    \u2502 166.91    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/test-mission\u2026 \u2502 404    \u2502 165.11    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/python-test-\u2026 \u2502 404    \u2502 162.39    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 165.22    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /director                           \u2502 404    \u2502 161.85    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 159.95    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 404    \u2502 163.58    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 404    \u2502 167.48    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/test-123      \u2502 404    \u2502 161.71    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /invalid-endpoint                   \u2502 404    \u2502 164.73    \u2502 \u274c      \u2502\n\u2502 DELETE \u2502 /health                             \u2502 404    \u2502 160.35    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 170.54    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /director                           \u2502 404    \u2502 162.57    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 165.87    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 404    \u2502 162.91    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/perf-test-123 \u2502 404    \u2502 164.16    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 161.5     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 1509.67   \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 1518.68   \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 1571.86   \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 1580.45   \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 164.39    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 169.98    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 173.4     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 168.62    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 175.8     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 196.69    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 164.12    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 170.13    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 170.55    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 171.69    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 173.65    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 165.4     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 161.39    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 478.43    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 169.26    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 173.58    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 167.73    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 170.09    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 169.04    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 160.0     \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 958.81    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 176.2     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 177.65    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 173.48    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 166.76    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 170.88    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 169.94    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 167.14    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 169.75    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 171.0     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 404    \u2502 173.93    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 169.24    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 168.98    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 170.28    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 166.87    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 404    \u2502 172.98    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 404    \u2502 178.17    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 404    \u2502 160.43    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/xxxxxxxxxxxx\u2026 \u2502 404    \u2502 173.0     \u2502 \u274c      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ud83d\udcbe Results exported to: api-test-results-20250809-180621.json\n"}}], "warnings": [{"message": "Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 73}, {"message": "Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 245}, {"message": "Unknown pytest.mark.load - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "c:\\Projects\\building-os-platform\\tests\\api\\test_performance.py", "lineno": 246}]}
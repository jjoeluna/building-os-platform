{"created": 1754583417.7809522, "duration": 75.38309288024902, "exitcode": 1, "root": "C:\\Projects\\building-os-platform\\tests\\api", "environment": {}, "summary": {"passed": 13, "failed": 11, "total": 24, "collected": 24}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py", "type": "Module"}]}, {"nodeid": "test_endpoints.py::TestPayloads", "outcome": "passed", "result": []}, {"nodeid": "test_endpoints.py::TestHealthEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_success", "type": "Function", "lineno": 14}, {"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_performance", "type": "Function", "lineno": 23}]}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_basic_request", "type": "Function", "lineno": 37}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_request", "type": "Function", "lineno": 46}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_id", "type": "Function", "lineno": 56}]}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_valid_message", "type": "Function", "lineno": 68}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_user_id", "type": "Function", "lineno": 81}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_message", "type": "Function", "lineno": 89}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_conversations", "type": "Function", "lineno": 97}]}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_call_basic", "type": "Function", "lineno": 109}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_missing_mission_id", "type": "Function", "lineno": 120}]}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_basic", "type": "Function", "lineno": 132}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_with_custom_query", "type": "Function", "lineno": 142}]}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_mission_status", "type": "Function", "lineno": 155}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_different_mission_id", "type": "Function", "lineno": 166}]}, {"nodeid": "test_endpoints.py::TestCORSHeaders", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/health]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/director]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/persona]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/elevator/call]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/psim/search]", "type": "Function", "lineno": 178}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/coordinator/missions/test-123]", "type": "Function", "lineno": 178}]}, {"nodeid": "test_endpoints.py::TestErrorHandling", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_endpoint", "type": "Function", "lineno": 220}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_method", "type": "Function", "lineno": 225}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_malformed_json", "type": "Function", "lineno": 235}]}, {"nodeid": "test_endpoints.py", "outcome": "passed", "result": [{"nodeid": "test_endpoints.py::TestPayloads", "type": "Class"}, {"nodeid": "test_endpoints.py::TestHealthEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint", "type": "Class"}, {"nodeid": "test_endpoints.py::TestCORSHeaders", "type": "Class"}, {"nodeid": "test_endpoints.py::TestErrorHandling", "type": "Class"}]}], "tests": [{"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_success", "lineno": 14, "outcome": "passed", "keywords": ["test_health_check_success", "TestHealthEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.008556400000088615, "outcome": "passed", "stdout": "\n\ud83e\uddea Starting BuildingOS API Test Suite\n\ud83c\udf10 Base URL: https://pj4vlvxrg7.execute-api.us-east-1.amazonaws.com\n\ud83c\udff7\ufe0f  Environment: dev\n"}, "call": {"duration": 1.2969057000009343, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 1294.16ms | \ud83d\udce6 Size: 60 bytes\n"}, "teardown": {"duration": 0.0012900000001536682, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestHealthEndpoint::test_health_check_performance", "lineno": 23, "outcome": "passed", "keywords": ["test_health_check_performance", "TestHealthEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005715000006603077, "outcome": "passed"}, "call": {"duration": 0.21572690000175498, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 213.53ms | \ud83d\udce6 Size: 60 bytes\n"}, "teardown": {"duration": 0.0009424000018043444, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_basic_request", "lineno": 37, "outcome": "passed", "keywords": ["test_director_basic_request", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005135999999765772, "outcome": "passed"}, "call": {"duration": 7.240611400000489, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /director\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 7238.50ms | \ud83d\udce6 Size: 128 bytes\n"}, "teardown": {"duration": 0.0007789999981469009, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_request", "lineno": 46, "outcome": "passed", "keywords": ["test_director_with_user_request", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004687000000558328, "outcome": "passed"}, "call": {"duration": 13.540342199998122, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /director?user_request=Test mission from Python API tests\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 13537.76ms | \ud83d\udce6 Size: 128 bytes\n"}, "teardown": {"duration": 0.0008924999965529423, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestDirectorEndpoint::test_director_with_user_id", "lineno": 56, "outcome": "passed", "keywords": ["test_director_with_user_id", "TestDirectorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004619999999704305, "outcome": "passed"}, "call": {"duration": 3.775402100000065, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /director?user_id=api-test-user\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 3773.14ms | \ud83d\udce6 Size: 128 bytes\n"}, "teardown": {"duration": 0.0007188999989011791, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_valid_message", "lineno": 68, "outcome": "failed", "keywords": ["test_persona_valid_message", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004891999997198582, "outcome": "passed"}, "call": {"duration": 0.838147200000094, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 74, "message": "assert 202 == 200\n +  where 202 = <Response [202]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 74, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 202 | \u23f1\ufe0f  Time: 835.68ms | \ud83d\udce6 Size: 135 bytes\n", "longrepr": "self = <api.test_endpoints.TestPersonaEndpoint object at 0x000002035AD6A5D0>\n\n    def test_persona_valid_message(self):\n        \"\"\"Test persona with valid message\"\"\"\n        payload = TestPayloads.persona_message()\n        response, data = client.post(\"/persona\", json=payload)\n    \n>       assert response.status_code == 200\nE       assert 202 == 200\nE        +  where 202 = <Response [202]>.status_code\n\ntest_endpoints.py:74: AssertionError"}, "teardown": {"duration": 0.0012623000002349727, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_user_id", "lineno": 81, "outcome": "passed", "keywords": ["test_persona_missing_user_id", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0008250999999290798, "outcome": "passed"}, "call": {"duration": 0.19743730000118376, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 400 | \u23f1\ufe0f  Time: 195.09ms | \ud83d\udce6 Size: 45 bytes\n"}, "teardown": {"duration": 0.0009141000009549316, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_missing_message", "lineno": 89, "outcome": "passed", "keywords": ["test_persona_missing_message", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004928999987896532, "outcome": "passed"}, "call": {"duration": 0.18973670000195852, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 400 | \u23f1\ufe0f  Time: 187.67ms | \ud83d\udce6 Size: 45 bytes\n"}, "teardown": {"duration": 0.000912600000447128, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPersonaEndpoint::test_persona_conversations", "lineno": 97, "outcome": "failed", "keywords": ["test_persona_conversations", "TestPersonaEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005108000004838686, "outcome": "passed"}, "call": {"duration": 6.838087899999664, "outcome": "failed", "crash": {"path": "C:\\Projects\\building-os-platform\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /persona/conversations?user_id=api-test-user (Caused by ResponseError('too many 500 error responses'))"}, "traceback": [{"path": "test_endpoints.py", "lineno": 101, "message": ""}, {"path": "client.py", "lineno": 119, "message": "in get"}, {"path": "client.py", "lineno": 64, "message": "in make_request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 589, "message": "in request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 703, "message": "in send"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "RetryError"}], "stdout": "\n\ud83d\ude80 GET /persona/conversations?user_id=api-test-user\n\u274c Request failed: \nHTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', \nport=443): Max retries exceeded with url: \n/persona/conversations?user_id=api-test-user (Caused by ResponseError('too many\n500 error responses'))\n", "longrepr": "urllib3.exceptions.ResponseError: too many 500 error responses\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [GET]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:932: in urlopen\n    retries = retries.increment(method, url, response=response, _pool=self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'GET', url = '/persona/conversations?user_id=api-test-user'\nresponse = <urllib3.response.HTTPResponse object at 0x000002035AE408B0>, error = None, _pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002035ADF4D70>\n_stacktrace = None\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /persona/conversations?user_id=api-test-user (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\util\\retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <api.test_endpoints.TestPersonaEndpoint object at 0x000002035AD36780>\n\n    def test_persona_conversations(self):\n        \"\"\"Test persona conversations endpoint\"\"\"\n        user_id = config.test_user_id\n>       response, data = client.get(f\"/persona/conversations?user_id={user_id}\")\n\ntest_endpoints.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclient.py:119: in get\n    return self.make_request(\"GET\", endpoint, **kwargs)\nclient.py:64: in make_request\n    response = self.session.request(\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [GET]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n>               raise RetryError(e, request=request)\nE               requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /persona/conversations?user_id=api-test-user (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:510: RetryError"}, "teardown": {"duration": 0.0010134000003745314, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_call_basic", "lineno": 109, "outcome": "failed", "keywords": ["test_elevator_call_basic", "TestElevatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0008435000017925631, "outcome": "passed"}, "call": {"duration": 6.885421200000565, "outcome": "failed", "crash": {"path": "C:\\Projects\\building-os-platform\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))"}, "traceback": [{"path": "test_endpoints.py", "lineno": 113, "message": ""}, {"path": "client.py", "lineno": 122, "message": "in post"}, {"path": "client.py", "lineno": 64, "message": "in make_request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 589, "message": "in request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 703, "message": "in send"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "RetryError"}], "stdout": "\n\ud83d\ude80 POST /elevator/call\n\u274c Request failed: \nHTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', \nport=443): Max retries exceeded with url: /elevator/call (Caused by \nResponseError('too many 500 error responses'))\n", "longrepr": "urllib3.exceptions.ResponseError: too many 500 error responses\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:932: in urlopen\n    retries = retries.increment(method, url, response=response, _pool=self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'POST', url = '/elevator/call'\nresponse = <urllib3.response.HTTPResponse object at 0x000002035AE41ED0>, error = None, _pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002035ADF4D70>\n_stacktrace = None\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\util\\retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <api.test_endpoints.TestElevatorEndpoint object at 0x000002035AD6A850>\n\n    def test_elevator_call_basic(self):\n        \"\"\"Test basic elevator call\"\"\"\n        payload = TestPayloads.elevator_call()\n>       response, data = client.post(\"/elevator/call\", json=payload)\n\ntest_endpoints.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclient.py:122: in post\n    return self.make_request(\"POST\", endpoint, **kwargs)\nclient.py:64: in make_request\n    response = self.session.request(\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n>               raise RetryError(e, request=request)\nE               requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:510: RetryError"}, "teardown": {"duration": 0.001206500000989763, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestElevatorEndpoint::test_elevator_missing_mission_id", "lineno": 120, "outcome": "failed", "keywords": ["test_elevator_missing_mission_id", "TestElevatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.000760499999159947, "outcome": "passed"}, "call": {"duration": 6.8437035999995715, "outcome": "failed", "crash": {"path": "C:\\Projects\\building-os-platform\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))"}, "traceback": [{"path": "test_endpoints.py", "lineno": 124, "message": ""}, {"path": "client.py", "lineno": 122, "message": "in post"}, {"path": "client.py", "lineno": 64, "message": "in make_request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 589, "message": "in request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 703, "message": "in send"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "RetryError"}], "stdout": "\n\ud83d\ude80 POST /elevator/call\n\u274c Request failed: \nHTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', \nport=443): Max retries exceeded with url: /elevator/call (Caused by \nResponseError('too many 500 error responses'))\n", "longrepr": "urllib3.exceptions.ResponseError: too many 500 error responses\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:932: in urlopen\n    retries = retries.increment(method, url, response=response, _pool=self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'POST', url = '/elevator/call'\nresponse = <urllib3.response.HTTPResponse object at 0x000002035AE43490>, error = None, _pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002035ADF4D70>\n_stacktrace = None\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\util\\retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <api.test_endpoints.TestElevatorEndpoint object at 0x000002035AD6A990>\n\n    def test_elevator_missing_mission_id(self):\n        \"\"\"Test elevator call without mission_id\"\"\"\n        payload = {\"action\": \"call_elevator\", \"parameters\": {\"floor\": 3}}\n>       response, data = client.post(\"/elevator/call\", json=payload)\n\ntest_endpoints.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclient.py:122: in post\n    return self.make_request(\"POST\", endpoint, **kwargs)\nclient.py:64: in make_request\n    response = self.session.request(\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n>               raise RetryError(e, request=request)\nE               requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:510: RetryError"}, "teardown": {"duration": 0.00155570000060834, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_basic", "lineno": 132, "outcome": "passed", "keywords": ["test_psim_search_basic", "TestPSIMEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0008096000019577332, "outcome": "passed"}, "call": {"duration": 0.4689460000008694, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 466.65ms | \ud83d\udce6 Size: 223 bytes\n"}, "teardown": {"duration": 0.0008392999989155214, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestPSIMEndpoint::test_psim_search_with_custom_query", "lineno": 142, "outcome": "passed", "keywords": ["test_psim_search_with_custom_query", "TestPSIMEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005371000006562099, "outcome": "passed"}, "call": {"duration": 0.3261644000012893, "outcome": "passed", "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 322.69ms | \ud83d\udce6 Size: 223 bytes\n"}, "teardown": {"duration": 0.0009260000006179325, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_mission_status", "lineno": 155, "outcome": "passed", "keywords": ["test_coordinator_mission_status", "TestCoordinatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0006091000032029115, "outcome": "passed"}, "call": {"duration": 0.20090650000202004, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /coordinator/missions/test-mission-123\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 198.26ms | \ud83d\udce6 Size: 463 bytes\n"}, "teardown": {"duration": 0.0008502999990014359, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCoordinatorEndpoint::test_coordinator_different_mission_id", "lineno": 166, "outcome": "failed", "keywords": ["test_coordinator_different_mission_id", "TestCoordinatorEndpoint", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.000481999999465188, "outcome": "passed"}, "call": {"duration": 0.1945092999994813, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 172, "message": "assert 404 == 200\n +  where 404 = <Response [404]>.status_code"}, "traceback": [{"path": "test_endpoints.py", "lineno": 172, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /coordinator/missions/python-test-1754583392\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 192.20ms | \ud83d\udce6 Size: 53 bytes\n", "longrepr": "self = <api.test_endpoints.TestCoordinatorEndpoint object at 0x000002035AD6AE90>\n\n    def test_coordinator_different_mission_id(self):\n        \"\"\"Test coordinator with different mission ID\"\"\"\n        mission_id = f\"python-test-{int(time.time())}\"\n        response, data = client.get(f\"/coordinator/missions/{mission_id}\")\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntest_endpoints.py:172: AssertionError"}, "teardown": {"duration": 0.0012733000003208872, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/health]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/health]", "parametrize", "pytestmark", "/health", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0006499000010080636, "outcome": "passed"}, "call": {"duration": 0.1878194999990228, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /health\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /health\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 185.56ms | \ud83d\udce6 Size: 60 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000002035AD6B250>, endpoint = '/health'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /health\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0008815000001050066, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/director]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/director]", "parametrize", "pytestmark", "/director", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005930000006628688, "outcome": "passed"}, "call": {"duration": 9.092146099999809, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /director\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /director\n\ud83d\udcca Status: 200 | \u23f1\ufe0f  Time: 9089.89ms | \ud83d\udce6 Size: 128 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000002035AD6B390>, endpoint = '/director'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /director\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0009117000008700415, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/persona]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/persona]", "parametrize", "pytestmark", "/persona", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005681000002368819, "outcome": "passed"}, "call": {"duration": 0.17514460000165855, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /persona\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /persona\n\ud83d\udcca Status: 400 | \u23f1\ufe0f  Time: 172.99ms | \ud83d\udce6 Size: 45 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000002035AD375C0>, endpoint = '/persona'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /persona\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0008429999979853164, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/elevator/call]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/elevator/call]", "parametrize", "pytestmark", "/elevator/call", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005307999999786261, "outcome": "passed"}, "call": {"duration": 6.7361898999988625, "outcome": "failed", "crash": {"path": "C:\\Projects\\building-os-platform\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))"}, "traceback": [{"path": "test_endpoints.py", "lineno": 200, "message": ""}, {"path": "client.py", "lineno": 122, "message": "in post"}, {"path": "client.py", "lineno": 64, "message": "in make_request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 589, "message": "in request"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py", "lineno": 703, "message": "in send"}, {"path": "..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py", "lineno": 510, "message": "RetryError"}], "stdout": "\n\ud83d\ude80 POST /elevator/call\n\u274c Request failed: \nHTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', \nport=443): Max retries exceeded with url: /elevator/call (Caused by \nResponseError('too many 500 error responses'))\n", "longrepr": "urllib3.exceptions.ResponseError: too many 500 error responses\n\nThe above exception was the direct cause of the following exception:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n>           resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:942: in urlopen\n    return self.urlopen(\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:932: in urlopen\n    retries = retries.increment(method, url, response=response, _pool=self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'POST', url = '/elevator/call'\nresponse = <urllib3.response.HTTPResponse object at 0x000002035AE41A50>, error = None, _pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002035ADF4D70>\n_stacktrace = None\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\urllib3\\util\\retry.py:519: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <api.test_endpoints.TestCORSHeaders object at 0x000002035AD376F0>, endpoint = '/elevator/call'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n>           response, _ = client.post(endpoint, json=payload)\n\ntest_endpoints.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nclient.py:122: in post\n    return self.make_request(\"POST\", endpoint, **kwargs)\nclient.py:64: in make_request\n    response = self.session.request(\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n..\\..\\.venv\\Lib\\site-packages\\requests\\sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002035AD68F50>, request = <PreparedRequest [POST]>, stream = False, timeout = Timeout(connect=30, read=30, total=None)\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n    \n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n    \n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n>               raise RetryError(e, request=request)\nE               requests.exceptions.RetryError: HTTPSConnectionPool(host='pj4vlvxrg7.execute-api.us-east-1.amazonaws.com', port=443): Max retries exceeded with url: /elevator/call (Caused by ResponseError('too many 500 error responses'))\n\n..\\..\\.venv\\Lib\\site-packages\\requests\\adapters.py:510: RetryError"}, "teardown": {"duration": 0.001101300000300398, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/psim/search]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/psim/search]", "parametrize", "pytestmark", "/psim/search", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0008651999996800441, "outcome": "passed"}, "call": {"duration": 0.17489109999951324, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /psim/search\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 POST /psim/search\n\ud83d\udcca Status: 400 | \u23f1\ufe0f  Time: 172.49ms | \ud83d\udce6 Size: 43 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000002035AE28170>, endpoint = '/psim/search'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /psim/search\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.000956299998506438, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestCORSHeaders::test_cors_headers_present[/coordinator/missions/test-123]", "lineno": 178, "outcome": "failed", "keywords": ["test_cors_headers_present[/coordinator/missions/test-123]", "parametrize", "pytestmark", "/coordinator/missions/test-123", "TestCORSHeaders", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0007398000016110018, "outcome": "passed"}, "call": {"duration": 0.20064510000156588, "outcome": "failed", "crash": {"path": "c:\\Projects\\building-os-platform\\tests\\api\\test_endpoints.py", "lineno": 215, "message": "AssertionError: No CORS headers found in response for /coordinator/missions/test-123\nassert False"}, "traceback": [{"path": "test_endpoints.py", "lineno": 215, "message": "AssertionError"}], "stdout": "\n\ud83d\ude80 GET /coordinator/missions/test-123\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 198.24ms | \ud83d\udce6 Size: 39 bytes\n", "longrepr": "self = <api.test_endpoints.TestCORSHeaders object at 0x000002035ADD49E0>, endpoint = '/coordinator/missions/test-123'\n\n    @pytest.mark.parametrize(\n        \"endpoint\",\n        [\n            \"/health\",\n            \"/director\",\n            \"/persona\",\n            \"/elevator/call\",\n            \"/psim/search\",\n            \"/coordinator/missions/test-123\",\n        ],\n    )\n    def test_cors_headers_present(self, endpoint):\n        \"\"\"Test that CORS headers are present\"\"\"\n        method = (\n            \"POST\"\n            if endpoint in [\"/persona\", \"/elevator/call\", \"/psim/search\"]\n            else \"GET\"\n        )\n    \n        if method == \"POST\":\n            payload = {\"test\": \"data\"}\n            response, _ = client.post(endpoint, json=payload)\n        else:\n            response, _ = client.get(endpoint)\n    \n        # Check for CORS headers (they might be case-insensitive)\n        headers_lower = {k.lower(): v for k, v in response.headers.items()}\n    \n        # At least one CORS header should be present\n        cors_headers = [\n            \"access-control-allow-origin\",\n            \"access-control-allow-methods\",\n            \"access-control-allow-headers\",\n        ]\n    \n        has_cors = any(header in headers_lower for header in cors_headers)\n>       assert has_cors, f\"No CORS headers found in response for {endpoint}\"\nE       AssertionError: No CORS headers found in response for /coordinator/missions/test-123\nE       assert False\n\ntest_endpoints.py:215: AssertionError"}, "teardown": {"duration": 0.0009766000002855435, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_endpoint", "lineno": 220, "outcome": "passed", "keywords": ["test_invalid_endpoint", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004980000012437813, "outcome": "passed"}, "call": {"duration": 0.15961949999837088, "outcome": "passed", "stdout": "\n\ud83d\ude80 GET /invalid-endpoint\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 157.43ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0009963000011339318, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_invalid_method", "lineno": 225, "outcome": "passed", "keywords": ["test_invalid_method", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0005662999974447303, "outcome": "passed"}, "call": {"duration": 0.1638210999990406, "outcome": "passed", "stdout": "\n\ud83d\ude80 DELETE /health\n\ud83d\udcca Status: 404 | \u23f1\ufe0f  Time: 161.54ms | \ud83d\udce6 Size: 23 bytes\n"}, "teardown": {"duration": 0.0007359000010183081, "outcome": "passed", "stdout": "\n"}}, {"nodeid": "test_endpoints.py::TestErrorHandling::test_malformed_json", "lineno": 235, "outcome": "passed", "keywords": ["test_malformed_json", "TestErrorHandling", "test_endpoints.py", "__init__.py", "api"], "setup": {"duration": 0.0004271000034350436, "outcome": "passed"}, "call": {"duration": 7.878427499999816, "outcome": "passed"}, "teardown": {"duration": 0.0613164999995206, "outcome": "passed", "stdout": "\n\n\ud83d\udcca Test Session Complete\n                              \ud83d\udd0d Request Summary                               \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Method \u2502 Endpoint                            \u2502 Status \u2502 Time (ms) \u2502 Success \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 GET    \u2502 /health                             \u2502 200    \u2502 1294.16   \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /health                             \u2502 200    \u2502 213.53    \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /director                           \u2502 200    \u2502 7238.5    \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /director?user_request=Test mission \u2502 200    \u2502 13537.76  \u2502 \u2705      \u2502\n\u2502        \u2502 from Python API tests               \u2502        \u2502           \u2502         \u2502\n\u2502 GET    \u2502 /director?user_id=api-test-user     \u2502 200    \u2502 3773.14   \u2502 \u2705      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 202    \u2502 835.68    \u2502 \u2705      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 400    \u2502 195.09    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 400    \u2502 187.67    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /persona/conversations?user_id=api\u2026 \u2502 0      \u2502 6834.98   \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 0      \u2502 6882.66   \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 0      \u2502 6840.97   \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 200    \u2502 466.65    \u2502 \u2705      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 200    \u2502 322.69    \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /coordinator/missions/test-mission\u2026 \u2502 200    \u2502 198.26    \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /coordinator/missions/python-test-\u2026 \u2502 404    \u2502 192.2     \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /health                             \u2502 200    \u2502 185.56    \u2502 \u2705      \u2502\n\u2502 GET    \u2502 /director                           \u2502 200    \u2502 9089.89   \u2502 \u2705      \u2502\n\u2502 POST   \u2502 /persona                            \u2502 400    \u2502 172.99    \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /elevator/call                      \u2502 0      \u2502 6733.69   \u2502 \u274c      \u2502\n\u2502 POST   \u2502 /psim/search                        \u2502 400    \u2502 172.49    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /coordinator/missions/test-123      \u2502 404    \u2502 198.24    \u2502 \u274c      \u2502\n\u2502 GET    \u2502 /invalid-endpoint                   \u2502 404    \u2502 157.43    \u2502 \u274c      \u2502\n\u2502 DELETE \u2502 /health                             \u2502 404    \u2502 161.54    \u2502 \u274c      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Performance Metrics \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udcc8 Avg: 3377.80ms | \u26a1 Min: 185.56ms | \ud83d\udc0c Max: 13537.76ms                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\ud83d\udcbe Results exported to: api-test-results-20250807-131657.json\n"}}]}